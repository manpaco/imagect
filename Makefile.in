# Set project directory one level above the Makefile directory. $(CURDIR) is a GNU make variable containing the path to the current working directory
PROJDIR := @PROJDIR@
SRCDIR := @SRCDIR@
INCDIR := @INCDIR@
WINDIR := @WINDIR@
BUILDDIR := @BUILDDIR@

# Name of the final executable
PROJECT = @PROJECT@
TARGET = $(PROJECT)
ifeq ($(OSTARGET),Windows)
    TARGET = $(PROJECT).exe
endif

# Decide whether the commands will be shown or not
VERBOSE = TRUE

# Create the list of directories
SUBDIRS = @SUBDIRS@
SRCDIRS = $(SRCDIR)
SRCDIRS += $(foreach dir, $(SUBDIRS), $(addprefix $(SRCDIR)/, $(dir)))
BUILDDIRS = $(foreach dir, $(SUBDIRS), $(addprefix $(BUILDDIR)/, $(dir)))

# Add this list to VPATH, the place make will look for the source files
VPATH = $(SRCDIRS)

# Create a list of *.c sources in DIRS
SOURCES = $(foreach dir,$(SRCDIRS),$(wildcard $(dir)/*.c))

# Define objects for all sources
OBJS := $(subst $(SRCDIR),$(BUILDDIR),$(SOURCES:.c=.o))

# Define dependencies files for all objects
DEPS = $(OBJS:.o=.d)

# Name the compiler
CC = @CC@

RM = rm -rf
RMDIR = rm -rf
MKDIR = mkdir -p
ERRIGNORE = 2>/dev/null

# Hide or not the calls depending of VERBOSE
ifeq ($(VERBOSE),TRUE)
    HIDE =
else
    HIDE = @
endif

# Define the function that will generate each rule
define generateRules
$(1)/%.o: %.c
    @echo Building $$@
    $(HIDE)$(CC) -c -I$$(INCDIR) -o $$@ $$< -MMD
endef

# Indicate to make which targets are not files
.PHONY: all clean directories

all: directories $(TARGET)

$(TARGET): $(OBJS)
    $(HIDE)echo Linking $@
    $(HIDE)$(CC) $(OBJS) -o $(TARGET)

# Include dependencies
-include $(DEPS)

# Generate rules
$(foreach rdir, $(BUILDDIRS), $(eval $(call generateRules, $(rdir))))

directories:
    $(HIDE)$(MKDIR) $(BUILDDIRS) $(ERRIGNORE)

# Remove all objects, dependencies and executable files generated during the build
clean:
    $(HIDE)$(RMDIR) $(BUILDDIRS) $(ERRIGNORE)
    $(HIDE)$(RM) $(TARGET) $(ERRIGNORE)
    @echo Cleaning done !
