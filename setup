#!/usr/bin/bash

CLANG="c++"
CSTD="${CLANG}11"
STDFLAG="-std=${CSTD}"
LANGFLAG="-x${CLANG}"

COMPILE_FLAGS_OPT="--compile_flags"
MSYS2_OPT="--msys2"
EDITORCONFIG_OPT="--editorconfig"
COMPILATION_OPT="--compilation"

EDITORCONFIG_FN=".editorconfig"
EDITORCONFIG_IN_FN="${EDITORCONFIG_FN}.in"
COMPILE_FLAGS_FN="compile_flags.txt"
MAKEFILE_FN="Makefile"
MAKEFILE_IN_FN="${MAKEFILE_FN}.in"
BUILDVALUES_FN="buildvalues.h"
BUILDVALUES_IN_FN="${BUILDVALUES_FN}.in"
WIN_FMT="exe"

REPLACE_REGEX="@[a-zA-Z]+@"
PROJECT_R="@PROJECT@"
TARGET_R="@TARGET@"
PROJDIR_R="@PROJDIR@"
SRCDIR_R="@SRCDIR@"
INCDIR_R="@INCDIR@"
WINDIR_R="@WINDIR@"
OUTDIR_R="@OUTDIR@"
SUBDIRS_R="@SUBDIRS@"

VERSION_SHORT_R="@VERSIONSHORT@"
VERSION_MAJOR_R="@VERSIONMAJOR@"
VERSION_MINOR_R="@VERSIONMINOR@"
VERSION_PATCH_R="@VERSIONPATCH@"
VERSION_SUFFIX_R="@VERSIONSUFFIX@"

VERSION_MAJOR_M1="^v([0-9]+).*"
VERSION_MINOR_M1="^v[0-9]+\.([0-9]+).*"
VERSION_PATCH_M1="^v[0-9]+\.[0-9]+\.([0-9]+).*"
VERSION_SUFFIX_M1="^v[0-9]+\.[0-9]+\.[0-9]+(.*)"

MAKEFILE_IN_FN_R="@MAKEFILEINFN@"

CXXFLAGS_R="@CXXFLAGS@"
LIBS_R="@LIBS@"

projname="imagect"
target="$projname"

projdir="$(realpath "$0")"
projdir="${projdir%/*}"

_srcdir="src"
_incdir="include"
_windir="win"
_output="output"
_config="config"
srcdir="${projdir}/${_srcdir}"
incdir="${projdir}/${_incdir}"
windir="${projdir}/${_windir}"
curdir="$(pwd)"
outdir="${curdir}/${_output}"
configdir="${projdir}/${_config}"
_subdirs=""

compile_flags_file="${projdir}/${COMPILE_FLAGS_FN}"
makefile_file="${curdir}/${MAKEFILE_FN}"
makefile_in_file="${projdir}/${MAKEFILE_IN_FN}"
buildvalues_file="${incdir}/${BUILDVALUES_FN}"
buildvalues_in_file="${projdir}/${BUILDVALUES_IN_FN}"
editorconfig_file="${projdir}/${EDITORCONFIG_FN}"
editorconfig_in_file="${configdir}/${EDITORCONFIG_IN_FN}"

trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    printf '%s' "$var"
}

cxxflags="$(wx-config --cxxflags)"
libs="$(wx-config --libs core,base)"

cxxflags="$(trim "$cxxflags")"
libs="$(trim "$libs")"

create_compile_flags () {
    echo "Creating $COMPILE_FLAGS_FN in $compile_flags_file ..."
    true > "$compile_flags_file"
    local compile_flags="$cxxflags -I$incdir $STDFLAG $LANGFLAG"
    for flag in $compile_flags; do
        echo "$flag" >> "$compile_flags_file"
    done
    echo "Done !"
    return 0
}

create_makefile () {
    ! [[ -e $makefile_in_file ]] && echo "Missing ${MAKEFILE_IN_FN}." &&
        return 1
    echo "Creating $MAKEFILE_FN in $makefile_file ..."
    while IFS='' read -r rline; do
        [[ "$rline" =~ $REPLACE_REGEX ]]
        local out
        case "${BASH_REMATCH[0]}" in
            "$PROJECT_R") out="$projname"
                ;;
            "$TARGET_R") out="$target"
                ;;
            "$PROJDIR_R") out="$projdir"
                ;;
            "$SRCDIR_R") out="$srcdir"
                ;;
            "$INCDIR_R") out="$incdir"
                ;;
            "$WINDIR_R") out="$windir"
                ;;
            "$OUTDIR_R") out="$outdir"
                ;;
            "$SUBDIRS_R") out="$_subdirs"
                ;;
            "$CXXFLAGS_R") out="$cxxflags"
                ;;
            "$LIBS_R") out="$libs"
                ;;
            *) out=""
                ;;
        esac
        echo "${rline//${BASH_REMATCH[0]}/$out}"
    done < "$makefile_in_file" > "$makefile_file"
    echo "Done !"
    return 0
}

get_git_tag() {
    git_tag=$(git -C "$projdir" describe --tags)
    [[ "$git_tag" =~ $VERSION_MAJOR_M1 ]]
    v_major=${BASH_REMATCH[1]}
    [[ "$git_tag" =~ $VERSION_MINOR_M1 ]]
    v_minor=${BASH_REMATCH[1]}
    [[ "$git_tag" =~ $VERSION_PATCH_M1 ]]
    v_patch=${BASH_REMATCH[1]}
    [[ "$git_tag" =~ $VERSION_SUFFIX_M1 ]]
    v_suffix=${BASH_REMATCH[1]}
}

create_build_values() {
    ! [[ -e $buildvalues_in_file ]] && echo "Missing ${BUILDVALUES_IN_FN}." &&
        return 1
    echo "Creating $BUILDVALUES_FN in $buildvalues_file ..."
    get_git_tag
    while IFS='' read -r rline; do
        [[ "$rline" =~ $REPLACE_REGEX ]]
        local out
        case "${BASH_REMATCH[0]}" in
            "$PROJECT_R") out="$projname"
                ;;
            "$VERSION_SHORT_R") out="$v_major.$v_minor.$v_patch"
                ;;
            "$VERSION_MAJOR_R") out="$v_major"
                ;;
            "$VERSION_MINOR_R") out="$v_minor"
                ;;
            "$VERSION_PATCH_R") out="$v_patch"
                ;;
            "$VERSION_SUFFIX_R") out="$v_suffix"
                ;;
            *) out=""
                ;;
        esac
        echo "${rline//${BASH_REMATCH[0]}/$out}"
    done < "$buildvalues_in_file" > "$buildvalues_file"
    echo "Done !"
    return 0
}

create_editorconfig() {
    ! [[ -e $editorconfig_in_file ]] && echo "Missing ${EDITORCONFIG_IN_FN}." &&
        return 1
    echo "Creating $EDITORCONFIG_FN in $editorconfig_file ..."
    get_git_tag
    while IFS='' read -r rline; do
        [[ "$rline" =~ $REPLACE_REGEX ]]
        local out
        case "${BASH_REMATCH[0]}" in
            "$MAKEFILE_IN_FN_R") out="${MAKEFILE_IN_FN}"
                ;;
            *) out=""
                ;;
        esac
        echo "${rline//${BASH_REMATCH[0]}/$out}"
    done < "$editorconfig_in_file" > "$editorconfig_file"
    echo "Done !"
    return 0
}

args="$*"
for a in $args; do
    case "$a" in
        "$COMPILE_FLAGS_OPT")
            cfo=1
            ;;
        "$EDITORCONFIG_OPT")
            eco=1
            ;;
        "$COMPILATION_OPT")
            cco=1
            ;;
        "$MSYS2_OPT")
            msys2=1
            ;;
        *)
            ;;
    esac
done
[[ $cfo -eq 1 ]] && create_compile_flags
[[ $eco -eq 1 ]] && create_editorconfig
if [[ $cco -eq 1 ]]; then
    create_build_values
    if [[ $msys2 -eq 1 ]]; then
        projdir="$(cygpath -m "$projdir")"
        srcdir="$(cygpath -m "$srcdir")"
        incdir="$(cygpath -m "$incdir")"
        windir="$(cygpath -m "$windir")"
        curdir="$(cygpath -m "$curdir")"
        outdir="$(cygpath -m "$outdir")"
        configdir="$(cygpath -m "$configdir")"
        target="${target}.${WIN_FMT}"
    fi
    create_makefile
fi

